#include "stm32f4xx.h"
int adcData;
int main(void) {
    // 1. Enable GPIOA clock by writing 1 to bit 0 of AHB1ENR
    RCC->AHB1ENR |= (1U << 0); 
    
    // 2. Enable ADC1 clock by writing 1 to bit 8 of APB2ENR
    RCC->APB2ENR |= (1 << 8);
    
    // 3. Set PA0 to analog mode by setting bits 0 and 1 of MODER to 1
    GPIOA->MODER |= (3U << 0);
	
    /* ADC1 Configurations */
    // 4. Set sampling time to 3 cycles for channel 0
    ADC1->SMPR2 = 0;

    // 5. Set ADC prescaler to PCLK2/2 (default) - CCR = 0
    ADC->CCR = 0;

    // 6. Reset CR1 and CR2 registers to initialize ADC settings
    ADC1->CR1 = 0;
    ADC1->CR2 = 0;
	
	 // 7. Enable continuous conversion mode by setting the CONT bit in CR2
    ADC1->CR2 |= (1U << 1); 
    //8. Choose the ADC channel by setting the first conversion in SQR3
    ADC1->SQR3 = 0; 
	
    // 9. Set conversion sequence length to 1
    ADC1->SQR1 = 0;
    
    // 10. Enable ADC by setting the ADON bit in CR2 (bit 0)
    ADC1->CR2 |= 1;
		
		  // 11. Wait until the ADC is ready (ADON bit is set)
    while((ADC1->CR2 & 1) == 0) {}
			 
			//12. Start the conversion by setting the SWSTART bit (bit 30) in CR2
       ADC1->CR2 |= (1 << 30);

    // 13. Start the ADC conversion process and read data
    while (1) {
       
        
        // Wait until the conversion is complete (EOC bit in SR is set)
        while (!(ADC1->SR & (1 << 1))) {}
        
        // Read the converted data from the ADC data register (DR)
        adcData = ADC1->DR;
    }
}